import { TimePlanComponent } from './../../../../shared/components/time-plan/time-plan.component';

import { Component, OnInit, ViewChild, ViewChildren } from '@angular/core';
import { RequestService } from '@appDir/shared/services/request.service';
import { FacilityUrlsEnum } from '@appDir/front-desk/masters/practice/practice/utils/facility-urls-enum';
import { REQUEST_SERVERS } from '@appDir/request-servers.enum';
import { ParamQuery, OrderEnum } from '@appDir/shared/CustomUrlBuilder/CustomUrlBuilder.class';
import { ActivatedRoute, Router } from '@angular/router';
import { RolesServiceService } from '@appDir/shared/components/roles/service/roles-service.service';
import { ToastrService } from 'ngx-toastr';
import { FormGroup, FormBuilder } from '@angular/forms';
import { HttpSuccessResponse, StorageData } from '@appDir/pages/content-pages/login/user.class';
import { UsersRoleEnum, UsersUrlsEnum } from '@appDir/front-desk/masters/master-users/users/users-urls.enum';
import { WeeklyTimingForm, Timing, TimeRangeInterface } from '@appDir/front-desk/masters/practice/practice/utils/practice.class';
import { DAYS } from '@appDir/front-desk/masters/shared/utils/days.enum';
import { CanDeactivateComponentInterface } from '@appDir/shared/canDeactivateFormsComponent/CanDeactivateComponent.interface';
import { NgbModal, NgbModalOptions, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';
import { RequiredFieldsFormComponent } from '../required-fields-form/required-fields-form.component';
import { AutoGeneratedFolder } from '@appDir/shared/components/roles/models/AutoGeneratedFolder.model';
import { SpecialityUrlsEnum } from '@appDir/front-desk/masters/providers/speciality/speciality.enum';
import { convertUTCTimeToTimeZone, getObjectChildValue, getOffsetByTimeZoneString, isEmptyObject, isSameLoginUser, makeDeepCopyObject, removeEmptyAndNullsFormObject, unSubAllPrevious } from '@appDir/shared/utils/utils.helpers';
import { AddSpecialtyFormComponent } from './components/add-specialty/add-specialty-form.component';
import { Subscription } from 'rxjs';
import { CustomDiallogService } from '@appDir/shared/services/custom-dialog.service';
import { AddSupervisorFormComponent } from './components/add-supervisor/add-supervisor-form.component';
import { ReplicateToAllFormComponent } from '@appDir/front-desk/masters/shared/components/replicate-to-all/replicate-to-all.component';
import { AssignSpecialityUrlsEnum } from '@appDir/scheduler-front-desk/modules/assign-speciality/assign-speciality-urls-enum';
import { UserInfoChangeService } from '../../services/user-info-change.service';
import { RolePrivilegesComponent } from '@appDir/shared/components/role-privilliges/role-privilliges.component';
import { DeleteAppointmentsComponent } from '../delete-appointments/delete-appointments.component';
import { AssignDoctorUrlsEnum } from '@appDir/scheduler-front-desk/modules/assign-doctor/assign-doctor-urls-enum';

@Component({
	selector: 'app-priviliges',
	templateUrl: './priviliges.component.html',
	styleUrls: ['./priviliges.component.scss']
})
export class PriviligesComponent implements OnInit, CanDeactivateComponentInterface {

	@ViewChildren(TimePlanComponent) timePlanComponent  :TimePlanComponent;
	@ViewChildren(RolePrivilegesComponent) rolePrivilegesComponent : RolePrivilegesComponent;
	@ViewChild('approlesprivales') approlesprivales :RolePrivilegesComponent 
	constructor(protected requestService: RequestService,
		public deleteModal: NgbModal,
		private activatedRoute: ActivatedRoute,
		private roleService: RolesServiceService,
		private toasterService: ToastrService,
		private fb: FormBuilder,
		private storageData: StorageData,
		public router: Router,
		public customDiallogService: CustomDiallogService,
		private modalService: NgbModal,private userInfoService:UserInfoChangeService) {
			this.subscriptions.push(
				this.userInfoService.onSavePrivilegesDataListener().subscribe((key)=>{
					if(key){
					this.approlesprivales.submit()
						this.submitAll();
					}
				})
			)
			
			// this._privilegesFormSubscription.unsubscribe();
	}

	childValues: WeeklyTimingForm = {
		timeZoneConverted: false,
		selectedTimings: [] as Timing[],
		timeRange: [] as TimeRangeInterface[],
		isValid: true,
		
	}
	_privilegesFormSubscription:any
	multiSpecChildValues:WeeklyTimingForm[]=[];
	practiceTimeZone: string;
	practiceTimeZoneOffset: number;
	lstFacilities: Array<any> = [];
	lstSpecialities: Array<any> = [];
	lstSpecialtiesSupervisorAgainstFacility :any[]=[]
	lstSupervisorAgainstFacility:any[]=[]
	userPermissonData = [];
	userId;
	multiple_assignment;
	isSameUserLogin = false;
	// userId
	form: FormGroup;
	isMedicalIdentifier:any = false;
	selectedUserRoleSlug:string=''
	hasSupervisor:boolean=false;
	loadSpin = false;
	isDisabledTemplateControl = false;
	practiceLocationId: number = 0;
	currentSpecialities: number[] = [];
	initialSpeciality;
	InitSpecility = 0;
	selectePractice:string = 'All Practice';
	selecteSpeciality:string = 'All Speciality';
	public modalRef: NgbModalRef;
	public subscriptions: Array<Subscription> = [];
	UserRoleSlugEnum=UsersRoleEnum;
	isNavigateToMedicalIdentifier:boolean=false;
	supervisorList:any=[];
	formPopupAction = false;
	public createModalRef: NgbModalRef;
	userName: string;
	ngOnInit() {
		this.userId = this.activatedRoute.parent.snapshot.params.id;

		this.form = this.fb.group({ facilities: [], speciality: [] });
		this.getSpecialities();
		this.getUsersRole();
		if(this.userId) {
			this.getUserById();
		}
	}
	ngOnDestroy() {
		unSubAllPrevious(this.subscriptions);
		
	}
	showReplicateAllButton:boolean=false;
	getUserTimings() {
		this.loadSpin=true
		let facility_location_id=this.practiceLocationId
		let paramQuery = { facility_location_id:facility_location_id , user_id: this.userId ,is_medical_identifier:this.isMedicalIdentifier,is_technician:this.hasSupervisor};
		this.requestService.sendRequest(UsersUrlsEnum.User_timings_GET, 'GET', REQUEST_SERVERS.fd_api_url, paramQuery)
			.subscribe((res: HttpSuccessResponse) => {
				debugger;
				this.loadSpin=false;
				this.lstSpecialtiesSupervisorAgainstFacility=[];
				this.multiSpecChildValues=[];
				this.lstSpecialtiesSupervisorAgainstFacility=res.result &&res.result.data ?res.result.data:[];
				if( (this.isMedicalIdentifier && !this.hasSupervisor))
				{
					
					this.showReplicateAllButton=true;
				

					if(this.lstSpecialtiesSupervisorAgainstFacility && this.lstSpecialtiesSupervisorAgainstFacility.length>0)
					{
						this.lstSpecialtiesSupervisorAgainstFacility.forEach((specialty,index)=>{
							// if((this.hasSupervisor&& this.isMedicalIdentifier) || (this.hasSupervisor&& !this.isMedicalIdentifier))
							// {
							// 	this.setSelectedSpecialtyUserTiming(specialty,index,null,specialty.id);

							// 	this.setSelectedUserTiming
							// }
							// else
							// {
								this.setSelectedSpecialtyUserTiming(specialty,index,specialty.id,null);
							// }
							
						})
					}
					
				
					// this.setSelectedUserTiming(specialities.timings);
				}
				else
				{
					this.setSelectedUserTiming(res.result.data);
					this.showReplicateAllButton=false;
				}
			});

	}

	getSupervisors()
	{
		this.supervisorList=[];
		let req={
			user_id :this.userId ,
			facility_location_id : this.practiceLocationId,
		}
		this.requestService.sendRequest(AssignSpecialityUrlsEnum.get_providers_for_technicion_loggedIn, 'GET', REQUEST_SERVERS.fd_api_url, req)
			.subscribe((data: HttpSuccessResponse) => {
				debugger;
				
				this.supervisorList= data.result.data|| [];
				console.log(this.supervisorList)
			
				// this.form.controls['facilities'].patchValue(data)
			});

	}
	setSelectedUserTiming(selectedTimings:any[])
	{
		debugger;
		this.childValues.selectedTimings = selectedTimings.map((time: Timing) => {
			time.start_time = convertUTCTimeToTimeZone(time.start_time, time.time_zone_string,time.time_zone);
			time.end_time = convertUTCTimeToTimeZone(time.end_time, time.time_zone_string,time.time_zone);
			return time;
		});
		this.setTimings(this.lstFacilities.find(facility => facility.id == this.practiceLocationId))
		this.childValues = makeDeepCopyObject(this.childValues)
	}

	setSelectedSpecialtyUserTiming(selectedspecialtyTimings,index,speciality_id?,supervisor_id?)
	{
		debugger;
		if(index==0)
		{
			this.SelectedSpecialitySupervisor=selectedspecialtyTimings.id
		}
		this.multiSpecChildValues[index]={
			timeZoneConverted: false,
			selectedTimings: [] as Timing[],
			timeRange: [] as TimeRangeInterface[],
			isValid: true,
			practice_location_id:this.practiceLocationId,
			speciality_id:speciality_id,
			supervisor_id:supervisor_id
		}
		
		this.multiSpecChildValues[index].selectedTimings= selectedspecialtyTimings.timings?selectedspecialtyTimings.timings.map((time: Timing) => {
			time.start_time = convertUTCTimeToTimeZone(time.start_time, time.time_zone_string,time.time_zone);
			time.end_time = convertUTCTimeToTimeZone(time.end_time, time.time_zone_string,time.time_zone);
			return time;
		}):[];
		this.setMultipleTimings(this.lstFacilities.find(facility => facility.id == this.practiceLocationId),this.multiSpecChildValues[index])
		// this.childValues = makeDeepCopyObject(this.childValues)
	}

	openAddSpecialtyModel() {
		debugger;
		const ngbModalOptions: NgbModalOptions = {
			backdrop: 'static',
			keyboard: false,
			windowClass: 'modal_extraDOc add-sepci',
		};	
		this.modalRef = this.modalService.open(AddSpecialtyFormComponent, ngbModalOptions);
		this.modalRef.componentInstance.user_id=this.userId;
		this.modalRef.componentInstance.facility_location_id=this.practiceLocationId;
		this.modalRef.componentInstance.excluded_speciality_ids=this.lstSpecialtiesSupervisorAgainstFacility && this.lstSpecialtiesSupervisorAgainstFacility.length>0?this.lstSpecialtiesSupervisorAgainstFacility.map(specialty=>specialty.id):[]
		this.modalRef.result.then(res=>{
			debugger;
			if(res&&res.data && res.data.length>0)
			{
				res.data.forEach(element => {
					let specialty={
						id:element.id,
						name:element.name,
						
						
					}
					this.lstSpecialtiesSupervisorAgainstFacility.push({...specialty})
					this.setSelectedSpecialtyUserTiming(specialty,this.lstSpecialtiesSupervisorAgainstFacility.length-1,specialty.id)
				});
				this.getPermissions(this.userId, this.practiceLocationId);
			}
		})
	}

	openAddSupervisorModel() {
		debugger;
		const ngbModalOptions: NgbModalOptions = {
			backdrop: 'static',
			keyboard: false,
			windowClass: 'modal_extraDOc',
		};	
		this.modalRef = this.modalService.open(AddSupervisorFormComponent, ngbModalOptions);
		this.modalRef.componentInstance.user_id=this.userId;
		this.modalRef.componentInstance.facility_location_id=this.practiceLocationId;
		this.modalRef.componentInstance.excluded_speciality_ids=this.lstSpecialtiesSupervisorAgainstFacility && this.lstSpecialtiesSupervisorAgainstFacility.length>0?this.lstSpecialtiesSupervisorAgainstFacility.map(specialty=>specialty.id):[]
		this.modalRef.result.then(res=>{
			debugger;
			if(res&&res.data && res.data.length>0)
			{
				res.data.forEach(element => {
					let supervisor={
						id:element.id,
						first_name:element.first_name,
						middle_name:element.middle_name,
						last_name:element.last_name,
					}
					this.supervisorList.push({...supervisor})
					// this.setSelectedSpecialtyUserTiming(supervisor,this.lstSpecialtiesSupervisorAgainstFacility.length-1,null,supervisor.id)
				});

			}
		})		
	}

	trackByMethod(index:number, el:any): number {
		if(el)
		{
			return el&&el.id;
		}
		
	  }

	openModel(row, modalFor,index) {
		debugger;
		const ngbModalOptions: NgbModalOptions = {
			backdrop: 'static',
			keyboard: false,
			windowClass: 'modal_extraDOc add-sepci',
		};

		switch(modalFor)
		{
			case 'specialty':
			{
				this.getReplicateDataForSpecialty(ngbModalOptions);
				break;
			}
			case 'supervisor':
			{
				this.getReplicateDataForSupervisor(ngbModalOptions);
				break;
			}
		}
	}

	getReplicateDataForSpecialty(ngbModalOptions:NgbModalOptions)
	{
		let req={
			user_id:this.userId
		}
		this.loadSpin=true;
		this.subscriptions.push(
			this.requestService
				.sendRequest(
					UsersUrlsEnum.get_specialties_name,
					'get',
					REQUEST_SERVERS.fd_api_url,
					req,
				)
				.subscribe(
					(res: any) => {
						if (res.status) {
							this.modalRef = this.modalService.open(ReplicateToAllFormComponent, ngbModalOptions);
							this.modalRef.componentInstance.title="Replicate";
							this.modalRef.componentInstance.data=res.result&&res.result.data?res.result.data.filter(specialty=>{
									if((specialty.facility_location_id!=this.practiceLocationId)||(specialty.facility_location_id==this.practiceLocationId &&specialty.specialty_id!=this.SelectedSpecialitySupervisor))
									{
										specialty['name']=specialty.specialty_name;
										return true
									}
									else
									return false;
									
								}):[];

							this.loadSpin=false;
							this.modalRef.result.then(res=>{
								if(res && res.data)
								{
									this.saveTimingAndReplicateToAll(res.data);
								}
								
							})
						}
					},
					(err) => {
						this.loadSpin = false;
						if(err.status==500)
						{
							this.toasterService.error(err.error && err.error.message?err.error.message:'Something went wront.','Error');
						}
						
					},
				),
		);
	}

	getReplicateDataForSupervisor(ngbModalOptions:NgbModalOptions)
	{
		let req={
			user_id:this.userId
		}
		this.loadSpin=true;
		this.subscriptions.push(
			this.requestService
				.sendRequest(
					UsersUrlsEnum.get_supervisor_name,
					'get',
					REQUEST_SERVERS.fd_api_url,
					req,
				)
				.subscribe(
					(res: any) => {
						if (res.status) {
							this.modalRef = this.modalService.open(ReplicateToAllFormComponent, ngbModalOptions);
							this.modalRef.componentInstance.title="Replicate";
							this.modalRef.componentInstance.data=res.result&&res.result.data?res.result.data.filter(supervisor=>{
								if((supervisor.facility_location_id!=this.practiceLocationId)||(supervisor.facility_location_id==this.practiceLocationId &&supervisor.supervisor_id!=this.SelectedSpecialitySupervisor))
								{
								supervisor['name']=`${supervisor.supervisor_first_name}${supervisor.supervisor_middle_name?' '+supervisor.supervisor_middle_name:' '}${supervisor.supervisor_last_name}`;
								return supervisor
								}
								else
								return false;
							}):[];
							this.loadSpin=false;
							this.modalRef.result.then(res=>{
								if(res && res.data)
								{
									this.saveTimingAndReplicateToAll(res.data)
								}
								
								
							})
						}
					},
					(err) => {
						this.loadSpin = false;
						if(err.status==500)
						{
							this.toasterService.error(err.error && err.error.message?err.error.message:'Something went wront.','Error');
						}
						
					},
				),
		);
	}

	replicateSpecialtyTimings(replicatedata:any[])
	{
		this.loadSpin = true;
		let replicate_timing=replicatedata.map(repdata=>{
			let replicate_time=
				{
					facility_location_id: repdata.facility_location_id,
					specialty_id : repdata.specialty_id
				}
				return replicate_time;
			
			
		})
		let req={
			user_id:this.userId,
			current_specialty_id:this.SelectedSpecialitySupervisor,
			current_facility_location_id:this.practiceLocationId,
			replicate_timings:replicate_timing
		}
		
		// let req= removeEmptyAndNullsFormObject(form);
		this.subscriptions.push(
			this.requestService
				.sendRequest(
					UsersUrlsEnum.replicate_specialty_timings,
					'POST',
					REQUEST_SERVERS.fd_api_url,
					req,
				)
				.subscribe(
					(res: any) => {
						if (res.status) {
							this.disableBtn = false;
							
							this.toasterService.success(res.message, 'Success');
							this.loadSpin = false;
							this.getUserTimings();
							
						}
					},
					(err) => {
						this.loadSpin = false;
						this.disableBtn = false;
						if(err.status==500)
						{
							this.toasterService.success(err.error && err.error.message?err.error.message:'Something went wrong.', 'Error');
						}
						// const str = parseHttpErrorResponseObject(err.error.message);
						// this.toaster.error(str);
					},
				),
		);
	}

	replicateSupervisorTimings(replicatedata)
	{

		this.loadSpin = true;
		let replicate_timing=replicatedata.map(repdata=>{
			let replicate_time=
				{
					facility_location_id: repdata.facility_location_id,
					supervisor_id : repdata.supervisor_id
				}
				return replicate_time;
			
			
		})
		let req={
			user_id:this.userId,
			current_supervisor_id:this.SelectedSpecialitySupervisor,
			current_facility_location_id:this.practiceLocationId,
			replicate_timings:replicate_timing
		}
		
		// let req= removeEmptyAndNullsFormObject(form);
		this.subscriptions.push(
			this.requestService
				.sendRequest(
					UsersUrlsEnum.replicate_supervisor_timings,
					'POST',
					REQUEST_SERVERS.fd_api_url,
					req,
				)
				.subscribe(
					(res: any) => {
						if (res.status) {
							this.disableBtn = false;
							
							this.toasterService.success(res.message, 'Success');
							this.loadSpin = false;
							this.getUserTimings();
							
						}
					},
					(err) => {
						this.loadSpin = false;
						this.disableBtn = false;
						if(err.status==500)
						{
							this.toasterService.success(err.error && err.error.message?err.error.message:'Something went wrong.', 'Error');
						}
					},
				),
		);
		
	}


	rolePriviligesInputData = { submit: false, hideButtons: true }
	disableBtn: boolean = false;
	submitAll() {
		this.disableBtn = true;
		if(this.isMedicalIdentifier)
		{
			this.isNavigateToMedicalIdentifier=true
		}
		else
		{
			this.isNavigateToMedicalIdentifier=false
		}
		this.getMultipleAssignment()
		this.submit_timings()
		this.form.markAsUntouched();
		this.formPopupAction = false;
		//this.initialSpeciality = this.currentSpeciality;
	//	console.log(this.currentSpeciality);
		this.rolePriviligesInputData.submit = true;
		this.rolePriviligesInputData = makeDeepCopyObject(this.rolePriviligesInputData);
		// if(this.isMedicalIdentifier) {
		// 	this.router.navigate([`front-desk/masters/users/creation/edit/${this.userId}/medical-identifier`]);
		// } else if(!this.isMedicalIdentifier) {
		// 	this.router.navigateByUrl('/front-desk/masters/users/creation/list?per_page=10&page=1');
		// }

	}

	saveTimingOnPracticeChange(facility_location_id?)
	{
		
			this.submit_timings(true,facility_location_id)
			
	}

	saveTimingAndReplicateToAll(replicatedata:any[])
	{
		this.submit_timings(false,this.practiceLocationId,true,replicatedata)
	}

	getUserById() {
		this.loadSpin = true;
		const queryParams = { id: this.userId };
		return this.requestService
			.sendRequest(UsersUrlsEnum.User_Basic_Info_GET, 'GET', REQUEST_SERVERS.fd_api_url, queryParams).subscribe(
				(res: any) => {
					this.multiple_assignment = res.result.data.allow_multiple_assignment;
					this.loadSpin = false;		
					this.userName =  res?.result?.data?.middle_name ? 
					`${res.result?.data?.first_name} ${res.result?.data?.middle_name} ${res.result?.data?.last_name}` : 
					`${res.result?.data?.first_name} ${res.result?.data?.last_name}`;					
				},
				(err) => {
					this.loadSpin = false;
				},
			);
	}

	changeMultipleAssignment(e) {
		this.multiple_assignment = e.checked === true ? 1 : 0;
	}

	getMultipleAssignment() {
		this.loadSpin = true;
		let req={
			user_id: this.userId,
			allow_multiple_assignment: this.multiple_assignment ? this.multiple_assignment : 0
		}
		this.requestService
				.sendRequest(
					UsersUrlsEnum.Allow_Multiple_Assignment_POST,
					'POST',
					REQUEST_SERVERS.fd_api_url,
					req
				)
				.subscribe(
					(res: any) => {
						if (res.status) {							
							this.toasterService.success(res.message, 'Success');
							this.loadSpin = false;							
						}
					},
					(err) => {
						this.loadSpin = false;
						if(err.status==500)
						{
							this.toasterService.success(err.error && err.error.message?err.error.message:'Something went wrong.', 'Error');
						}
					},
				)
	}

	submit_timings(isPracticeChange?,facilityLocationId?,isReplicateAll?,replicatedata?:any[]) {
		let is_specialty=this.isMedicalIdentifier && !this.hasSupervisor
		let form
		if(is_specialty )
		{
			form=this.requestObjForSpecialty(is_specialty,this.hasSupervisor)

		}
		else
		{
			form = {
				facility_location_id: this.practiceLocationId,
				 user_id: this.userId, 
				 timing: this.childValues.selectedTimings, 
				 time_zone: {
					time_zone: this.practiceTimeZoneOffset,
					time_zone_string: this.practiceTimeZone
				}
			};
		}
		if(isPracticeChange)
		{
			this.loadSpin=true
			this.rolePriviligesInputData.submit = true;
			this.rolePriviligesInputData = makeDeepCopyObject(this.rolePriviligesInputData);
		}
		return this.requestService.sendRequest(UsersUrlsEnum.User_timings_PUT, 'PUT', REQUEST_SERVERS.fd_api_url, form)
			.subscribe((response: HttpSuccessResponse) => {
				if (response['status']) {
					this.disableBtn = false;

					this.toasterService.success('Success User Timings Updated Successfully','Success');
					if(isPracticeChange)
					{
						this.practiceLocationId =facilityLocationId;
						this.getPermissions(this.userId, this.practiceLocationId);
						this.getUserFolderTypes()
						this.getUserTimings();

				if((this.isMedicalIdentifier && this.hasSupervisor) || (!this.isMedicalIdentifier && this.hasSupervisor))
				{
					this.getSupervisors();
				}
					}

					else if(isReplicateAll)
					{
						if(is_specialty)
						{
							this.replicateSpecialtyTimings(replicatedata)
						}
						else if(this.hasSupervisor)
						{
							this.replicateSupervisorTimings(replicatedata)
						}
					}


				}
			});
	}
	

	requestObjForSpecialty(is_specialty?,is_supervisor?)
	{
		let form
		if(is_specialty)
		{
			let specialies:any[]=[];
			specialies=this.lstSpecialtiesSupervisorAgainstFacility.map((specialty,index)=>{
				let spec={
					specialty_id:specialty.id,
					timing:this.multiSpecChildValues[index].selectedTimings
				}
				return spec
			})
			 form = {
				facility_location_id: this.practiceLocationId,
				 user_id: this.userId,
				 is_specialty: is_specialty,
				 specialties:specialies,
				 time_zone: {
					time_zone: this.practiceTimeZoneOffset,
					time_zone_string: this.practiceTimeZone
				}
		}
		return form;
	}
	else if(is_supervisor)
	{
		let supervisors:any[]=[];
		let form
		supervisors=this.lstSpecialtiesSupervisorAgainstFacility.map((supervisor,index)=>{
				let superv={
					supervisor_id:supervisor.id,
					timing:this.multiSpecChildValues[index].selectedTimings
				}
				return superv
			

		

			})
			 form = {
				facility_location_id: this.practiceLocationId,
				 user_id: this.userId,
				 is_supervisor: is_supervisor,
				 supervisors:supervisors,
				 time_zone: {
					time_zone: this.practiceTimeZoneOffset,
					time_zone_string: this.practiceTimeZone
				}
		}
		return form;
	}
		
	}
	getUsersRole(userId?) {

		let paramQuery = {};
		paramQuery['id'] = this.userId;

		this.requestService.sendRequest(UsersUrlsEnum.User_get_users_role_GET, 'GET', REQUEST_SERVERS.fd_api_url, paramQuery)
			.subscribe((data: HttpSuccessResponse) => {
				if (data.result.data)
				{
					this.isMedicalIdentifier = data.result.data.medical_identifier;
					this.hasSupervisor= data.result.data.has_supervisor;;
					this.selectedUserRoleSlug= data.result.data.slug;
					// if(this.selectedUserRoleSlug==this.UserRoleSlugEnum.Technician)
					// {
					// 	this.isTechnician=true;
					// }
					
				}
					
				this.getFacitiesOfUser();
				// this.form.controls['facilities'].patchValue(data)
			});
	}

	/*	getFacilities(userId?) {
			let paramQuery = {};
			if (userId) {
				paramQuery['user_id'] = this.userId;
			}
			this.requestService.sendRequest(FacilityUrlsEnum.Facility_list_dropdown_GET, 'get', REQUEST_SERVERS.fd_api_url, paramQuery)
				.map(data => {
					return data['result']['data'];
				}).subscribe(data => {
				this.lstFacilities = data;
				this.getPermissions(this.userId, '', this.form.value.facilities);
			});
		}*/

	getSpecialities() {
		this.loadSpin = true;
		const paramQuery: ParamQuery = { filter: false, order: OrderEnum.ASC, pagination: false } as any;
		this.requestService.sendRequest(SpecialityUrlsEnum.Speciality_list_Get, 'GET', REQUEST_SERVERS.fd_api_url, paramQuery)
			.subscribe(data => {
				this.loadSpin = false;
				this.lstSpecialities = data['result']['data'];
			});
	}

	getPermissions(id, facilityId) {
		if (!(id && facilityId && this.practiceLocationId)) {
			return;
		}
		this.loadSpin = true;
		// const requestData = {token: this.storageData.getToken(), user_id: id, speciality_id: specialityId, facility_id: this.practiceId};
		const requestData = removeEmptyAndNullsFormObject({
			user_id: id,
			// speciality_id: this.currentSpeciality || null,
			// speciality_id: null,
			facility_location_id: this.practiceLocationId
		});
		this.requestService.sendRequest('permissions', 'get', REQUEST_SERVERS.fd_api_url, requestData)
			.subscribe(data => {
				this.loadSpin = false;
				this.userPermissonData = data['result']['data']['tree'];
				this.currentSpecialities = data['result']['data']['speciality_ids'];
				this.isManualSpecialty = data['result']['data']['is_manual_specialty'];
				this.checkSameUser();
				if(!this.hasSupervisor)
				{
					// this.onSpecialityChange({ target: { value: this.currentSpeciality } });
					this.initialSpeciality = this.currentSpecialities
				}
				// this.onSpecialityChange({ target: { value: this.currentSpeciality } });
				// this.initialSpeciality = this.currentSpeciality
				// this.getDocumentManagerTaskPermissions()
			}, error1 => {
				this.loadSpin = false;
			});
	}
	// DISALBE FOR TEMPLATE DRIVEN FORM CONROL
	checkSameUser() {
		if(isSameLoginUser(this.userId)) {
			this.isDisabledTemplateControl = true;
		}
	}
	isManualSpecialty: boolean = false
	getDocumentManagerTaskPermissions() {

		let doc = this.userPermissonData.find(menu => menu.slug === 'patient').submenu.find(menu => menu.slug === 'case_list').submenu.find(menu => menu.slug === 'edit_case').submenu.find(menu => menu.slug === 'documents')

		this.userPermissonData.push(doc)
		this.userPermissonData.find(menu => menu.slug === 'patient').submenu.find(menu => menu.slug === 'case_list').submenu.find(menu => menu.slug === 'edit_case').submenu = this.userPermissonData.find(menu => menu.slug === 'patient').submenu.find(menu => menu.slug === 'case_list').submenu.find(menu => menu.slug === 'edit_case').submenu.filter(menu => menu.slug != 'documents')
	}
	submitData(event) {
		this.roleService.submitPersmissions({
			user_id: this.userId,
			permissions: event.permissions,
			is_manual_specialty: this.isManualSpecialty,
			facility_location_id: this.practiceLocationId,
			// facility_id: this.practiceId,
			speciality_ids: this.currentSpecialities?this.currentSpecialities:[]
		}).subscribe(data => {
				this.toasterService.success('Success Permissions Updated Successfully','Success');
		});
		this.attachUserFolderType().subscribe(data =>
			this.toasterService.success(data['message'], 'Success'));
			if(( this.isMedicalIdentifier  && !this.hasSupervisor ) && this.isNavigateToMedicalIdentifier) {
				if (this.lstFacilities && this.lstFacilities.length){
				this.router.navigate([`front-desk/masters/users/creation/edit/${this.userId}/template`]);
				}
				
				// this.router.navigate([`front-desk/masters/users/creation/edit/${this.userId}/medical-identifier`]);
			}

			else if( this.isMedicalIdentifier  && this.isNavigateToMedicalIdentifier)
			{
				this.router.navigate([`front-desk/masters/users/creation/edit/${this.userId}/medical-identifier`]);

			}
			
			 else if(( !this.isMedicalIdentifier  && !this.hasSupervisor) || (!this.isMedicalIdentifier  && this.hasSupervisor)    && !this.isNavigateToMedicalIdentifier) {
				// this.router.navigateByUrl('/front-desk/masters/users/creation/list?per_page=10&page=1');
			}
		
			
	}


	onPracticeChange(facility_location_id: number, facility: any) {
		if (this.practiceLocationId === facility_location_id) {
			return;
		}
		this.isNavigateToMedicalIdentifier = false;
		if (this.isMedicalIdentifier || this.hasSupervisor) {
			const timePlanResultData: TimePlanComponent[] = this.timePlanComponent['_results'];
			if (timePlanResultData && timePlanResultData.length > 0) {
				for (let i = 0; i < timePlanResultData.length; i++) {
					if (timePlanResultData[i].form.dirty) {
						this.customDiallogService
							.confirm('Please Save Data First', 'Do you want to save the information?')
							.then((confirmed) => {
								if (confirmed) {
									this.userInfoService.getPracticeStatus(true)
									this.saveTimingOnPracticeChange(facility_location_id);
								}
							})
							.catch();
						return; 
					}
				}
			}
		}
		// If no unsaved changes or user decides not to save, proceed with changing practice
		this.changePracticeLocation(facility_location_id);
	}
	
	changePracticeLocation(facility_location_id: number) {
		this.practiceLocationId = facility_location_id;
		this.getPermissions(this.userId, this.practiceLocationId);
		this.getUserFolderTypes();
		this.getUserTimings();
		this.getSupervisors();
	}

	setTimings(facility) {

		this.childValues.timeRange = []
		DAYS.forEach(element => {
			let timing = facility&&facility.timing.find((time) => {
				return time.day_id === element.id
			});
			if (!this.practiceTimeZone) {
				this.practiceTimeZone = getObjectChildValue(timing, false, ['time_zone_string']);
				// this.practiceTimeZone = this.storageData.getUserTimeZoneOffset().toString();
				// this.practiceTimeZoneOffset = getObjectChildValue(timing, false, ['time_zone']);
				// this.practiceTimeZoneOffset = getObjectChildValue(timing, false, ['time_zone']);
				// this.practiceTimeZoneOffset = this.storageData.getUserTimeZoneOffset()
				this.practiceTimeZoneOffset = getOffsetByTimeZoneString(this.storageData)
			}
			// this.childValues.timeRange.push({

			// 	day_id: element.id,
			// 	end_time: (timing) ? convertUTCTimeToTimeZone(timing.end_time, this.practiceTimeZone) : '',
			// 	time_zone_string: getObjectChildValue(timing, false, ['time_zone_string']),
			// 	start_time: (timing) ? convertUTCTimeToTimeZone(timing.start_time, this.practiceTimeZone) : '',
			// 	checked: (timing) ? true : false
			// })

			this.childValues.timeRange.push({
				day_id: element.id,
				end_time: getObjectChildValue(timing, '', ['end_time']),
				time_zone_string: getObjectChildValue(timing, false, ['time_zone_string']),
				start_time: getObjectChildValue(timing, '', ['start_time']),
				checked: (timing) ? true : false
			})
			// ;
			// if (!this.childValues.timeZoneConverted) {
			// 	this.childValues.selectedTimings = this.childValues.selectedTimings.map((timing) => {
			// 		timing.end_time = (timing) ? convertUTCTimeToTimeZone(timing.end_time, this.practiceTimeZone) : '';
			// 		timing.start_time = (timing) ? convertUTCTimeToTimeZone(timing.start_time, this.practiceTimeZone) : '';
			// 		this.childValues.timeZoneConverted = true;
			// 		return timing;
			// 	})
			// }
			this.childValues = makeDeepCopyObject(this.childValues)
		});
	}

	setMultipleTimings(facility,childValues) {

		childValues.timeRange = []
		DAYS.forEach(element => {
			let timing = facility.timing.find((time) => {
				return time.day_id === element.id
			});
			if (!this.practiceTimeZone) {
				this.practiceTimeZone = getObjectChildValue(timing, false, ['time_zone_string']);
				// this.practiceTimeZone = this.storageData.getUserTimeZoneOffset().toString();
				// this.practiceTimeZoneOffset = getObjectChildValue(timing, false, ['time_zone']);
				// this.practiceTimeZoneOffset = getObjectChildValue(timing, false, ['time_zone']);
				// this.practiceTimeZoneOffset = this.storageData.getUserTimeZoneOffset()
				this.practiceTimeZoneOffset = getOffsetByTimeZoneString(this.storageData)
			}
			// this.childValues.timeRange.push({

			// 	day_id: element.id,
			// 	end_time: (timing) ? convertUTCTimeToTimeZone(timing.end_time, this.practiceTimeZone) : '',
			// 	time_zone_string: getObjectChildValue(timing, false, ['time_zone_string']),
			// 	start_time: (timing) ? convertUTCTimeToTimeZone(timing.start_time, this.practiceTimeZone) : '',
			// 	checked: (timing) ? true : false
			// })

			childValues.timeRange.push({
				day_id: element.id,
				end_time: getObjectChildValue(timing, '', ['end_time']),
				time_zone_string: getObjectChildValue(timing, false, ['time_zone_string']),
				start_time: getObjectChildValue(timing, '', ['start_time']),
				checked: (timing) ? true : false
			})
			// ;
			// if (!this.childValues.timeZoneConverted) {
			// 	this.childValues.selectedTimings = this.childValues.selectedTimings.map((timing) => {
			// 		timing.end_time = (timing) ? convertUTCTimeToTimeZone(timing.end_time, this.practiceTimeZone) : '';
			// 		timing.start_time = (timing) ? convertUTCTimeToTimeZone(timing.start_time, this.practiceTimeZone) : '';
			// 		this.childValues.timeZoneConverted = true;
			// 		return timing;
			// 	})
			// }
			//  childValues = makeDeepCopyObject(this.childValues)
		});
	}

	deleteSpecialty(speciality?,index?)
	{
		this.customDiallogService
		.confirm('Delete Specialty', 'Do you really want to delete it?')
		.then((confirmed) => {
			if (confirmed) {
				this.deleteSpecialtyNewFunction(speciality,index);
			}
		})
		.catch();
	}

	deleteSpecialtyNewFunction(speciality?,index?){
		this.loadSpin=true;
		let req={
			user_id:this.userId,
			specialty_id:speciality.id,
			facility_location_id:this.practiceLocationId,
			time_zone_string: this.practiceTimeZone
		}
		this.subscriptions.push(
			this.requestService
			.sendRequest(
				UsersUrlsEnum.delete_speciality,
				'delete',
				REQUEST_SERVERS.fd_api_url,
				req
			)
			.subscribe(
				(data: any) => {
					if(data?.result?.data?.assignments_exist){
						this.loadSpin = true;
						let ngbModalOptions: NgbModalOptions = {
							backdrop: 'static',
							keyboard: false,
							size: 'lg',
						};
						this.createModalRef = this.deleteModal.open(DeleteAppointmentsComponent, ngbModalOptions);
						this.createModalRef.componentInstance.appointments = data?.result?.data?.appointments;
						this.createModalRef.componentInstance.assignments = data?.result?.data?.assigments;
						this.createModalRef.componentInstance.assignments_exist = data?.result?.data?.assignments_exist;
						this.createModalRef.componentInstance.userId = this.userId;
						this.createModalRef.componentInstance.userName = this.userName;
						this.createModalRef.componentInstance.modalRef = this.createModalRef;
						this.loadSpin = false;
						this.createModalRef.componentInstance.appointmentsDeleted.subscribe((deleted: boolean) => {
							if (deleted) {
								this.deleteSpecialtyNewFunction(speciality,index);
							}
						});
					}
					else {
						this.disableBtn = false;
						this.lstSpecialtiesSupervisorAgainstFacility.splice(index,1);
						this.multiSpecChildValues.splice(index,1);
						this.toasterService.success(data &&data.message?data.message:'Successfully Deleted', 'Success');
						this.loadSpin = false;
						if(this.SelectedSpecialitySupervisor===speciality.id)
						{
							this.SelectedSpecialitySupervisor=this.lstSpecialtiesSupervisorAgainstFacility && this.lstSpecialtiesSupervisorAgainstFacility.length>0?this.lstSpecialtiesSupervisorAgainstFacility[0].id:null
						}
						this.getPermissions(this.userId, this.practiceLocationId);
						
					}
				},
				(err) => {
					this.loadSpin = false;
					this.disableBtn = false;
					// const str = parseHttpErrorResponseObject(err.error.message);
					// this.toaster.error(str);
				},
			)
		);

	}

	deleteSupervisor(supervisor?,index?)
	{
		this.customDiallogService
		.confirm('Delete Supervisor', 'Do you really want to delete it?')
		.then((confirmed) => {
			if (confirmed) {
				this.loadSpin=true
					let req={
						user_id:this.userId,
						supervisor_id:supervisor.id,
						facility_location_id:this.practiceLocationId,
					}
					this.requestService
						.sendRequest(
							UsersUrlsEnum.delete_technician_supervisor,
							'delete',
							REQUEST_SERVERS.fd_api_url,
							req
						)
						.subscribe(
							(data: any) => {
								if (data.status) {
									this.disableBtn = false;
									this.supervisorList.splice(index,1);
									// this.multiSpecChildValues.splice(index,1);
									this.toasterService.success(data &&data.message?data.message:'Successfully Deleted', 'Success');
									this.loadSpin = false;
								// 	if(this.SelectedSpecialitySupervisor===supervisor.id)
								// {
								// 	this.SelectedSpecialitySupervisor=this.lstSpecialtiesSupervisorAgainstFacility && this.lstSpecialtiesSupervisorAgainstFacility.length>0?this.lstSpecialtiesSupervisorAgainstFacility[0].id:null
								// }
								
									
								}
							},
							(err) => {
								this.loadSpin = false;
								this.disableBtn = false;
								// const str = parseHttpErrorResponseObject(err.error.message);
								// this.toaster.error(str);
							},
						);
				

			}
		})
		.catch();
		
		
		
	}

	getFacitiesOfUser() {
		debugger;
		this.loadSpin = true;
		this.requestService.sendRequest(FacilityUrlsEnum.Facility_list_dropdown_GET, 'GET', REQUEST_SERVERS.fd_api_url, { user_id: this.userId })
			.subscribe(data => {
				debugger;
				this.loadSpin = false;
				let locations = data['result']['data'];
				this.lstFacilities = locations;


				if (locations.length) {
					this.isSameLoginUser(this.form , 'facilities');
					this.form.controls['facilities'].setValue(locations[0].id);
					this.practiceLocationId = locations[0].id;
					this.getUserFolderTypes()
					locations.map(location => {
						return location.timing.map((time: Timing) => {
							time.start_time = convertUTCTimeToTimeZone(time.start_time, time.time_zone_string,time.time_zone);
							time.end_time = convertUTCTimeToTimeZone(time.end_time, time.time_zone_string,time.time_zone);
							return time;
						});
					});
					this.setTimings(locations[0]);


					// 	this.childValues.timeRange.push({
					// 		day_id: element.id,
					// 		end_time: (timing) ? timing.end_time : '',
					// 		start_time: (timing) ? timing.start_time : '',
					// 		checked: (timing) ? true : false
					// 	})

					// DAYS.forEach(element => {

					// 	let timing = array[0].timing.find((time) => {
					// 		return time.day_id === element.id
					// 	});

					// 	this.childValues.timeRange.push({
					// 		day_id: element.id,
					// 		end_time: (timing) ? timing.end_time : '',
					// 		start_time: (timing) ? timing.start_time : '',
					// 		checked: (timing) ? true : false
					// 	})
					// 	this.childValues = makeDeepCopyObject(this.childValues)
					// });

				}
				this.getPermissions(this.userId, this.form.get('facilities').value);
				this.getUserTimings();
				if((this.isMedicalIdentifier && this.hasSupervisor) || (!this.isMedicalIdentifier && this.hasSupervisor))
				{
					this.getSupervisors();
				}
			}, error => {
				this.loadSpin = false;
			});

	}
	canDeactivate() {
		debugger
		if(!isSameLoginUser(this.userId)) {
			// let bool = this.form.touched || this.currentSpecialities != this.initialSpeciality
			// 			let bool = (this.form.touched || this.currentSpeciality != this.initialSpeciality) && this.formPopupAction;
			let bool = this.form.touched 
			return bool
		}
	}
	chosenSpeciality;
	// onSpecialityChange(event, allSpeciality? ) {
	// 	// console.log(event)
	// 	if (allSpeciality && allSpeciality.selectedIndex){
	// 		this.selecteSpeciality = this.lstSpecialities[allSpeciality.selectedIndex-1].name;
	// 	}
	// 	let id = event.target.value
	// 	if (!id) {
	// 		this.chosenSpeciality = null
	// 		return
	// 	}
	// 	this.requestService.sendRequest(SpecialityUrlsEnum.getUserVisitType, 'get', REQUEST_SERVERS.fd_api_url, { user_id: this.userId, facility_location_id: this.practiceLocationId, speciality_id: id }).subscribe(data => {
	// 		let speciality = this.lstSpecialities.find(speciality => speciality.id == id)
	// 		speciality.visit_types = data['result']['data']
	// 		this.chosenSpeciality = speciality
	// 	})

	// }
	SelectedSpecialitySupervisor:number=0;
	onSpecialitySupervisorChange(is_specialty, allSpeciality? ) {
		debugger;
		this.SelectedSpecialitySupervisor=allSpeciality.id;
		// this.selecteSpeciality=allSpeciality
		// console.log(event)
		// if (allSpeciality && allSpeciality.selectedIndex){
		// 	this.selecteSpeciality = this.lstSpecialities[allSpeciality.selectedIndex-1].name;
		// }
		let id = allSpeciality.id
		if (!is_specialty) {
			this.chosenSpeciality = null
			return
		}
		this.requestService.sendRequest(SpecialityUrlsEnum.getUserVisitType, 'get', REQUEST_SERVERS.fd_api_url, { user_id: this.userId, facility_location_id: this.practiceLocationId, speciality_id: id }).subscribe(data => {
			// let speciality = this.lstSpecialities.find(speciality => speciality.id == id)
			let speciality = allSpeciality
			speciality.visit_types = data['result']['data']
			this.chosenSpeciality = speciality
		})

	}

	addVisitType(row?) {
		let modalRef = this.modalService.open(RequiredFieldsFormComponent)

		modalRef.componentInstance.data = {
			user_id: this.userId,
			facility_location_id: this.practiceLocationId,
			speciality_id: this.chosenSpeciality ? this.chosenSpeciality.id : '',
			visit_type_id: row ? row.id : '',
			fields_control_ids: row && row.fields_controls ? row.fields_controls.map(field => field.id) : []
		}

		modalRef.result.then(res => {
			if (res) {
				this.requestService.sendRequest(SpecialityUrlsEnum.getUserVisitType, 'get', REQUEST_SERVERS.fd_api_url, { user_id: this.userId, facility_location_id: this.practiceLocationId, speciality_id: this.chosenSpeciality.id }).subscribe(data => {

					// speciality.visit_types = data['result']['data']
					this.chosenSpeciality.visit_types = data['result']['data']
					// console.log(speciality)
				})
			}
		})
	}

	resetSpecialityId() {
		// this.currentSpeciality = 0;
		this.currentSpecialities = []
		// this.currentSpeciality = null;
	}
	dataObj: { data: AutoGeneratedFolder[], result: { item: AutoGeneratedFolder }[] } = {} as any
	getUserFolderTypes() {
		this.requestService.sendRequest(UsersUrlsEnum.User_Folder_Types_Get, 'get', REQUEST_SERVERS.erx_fd_api, { user_id: this.userId, facility_location_id: this.practiceLocationId }).subscribe(data => {
			this.dataObj.data = data['result']['data']
			this.dataObj = makeDeepCopyObject(this.dataObj)
		},err=>{
			this.loadSpin=false;
		})
	}

	attachUserFolderType() {
		let folder_req
		if(!isEmptyObject(this.dataObj)) {
			 folder_req = this.dataObj.result.map(item => {
			let { folder_type_id, facility_id, speciality_id, show_files } = item.item
			return { folder_type_id, facility_id, speciality_id, show_files }
			});
		}
			return this.requestService.sendRequest(UsersUrlsEnum.Attach_User_Folder_Type, 'post', REQUEST_SERVERS.fd_api_url, { folder_types: folder_req, user_id: this.userId, facility_location_id: this.practiceLocationId })
	
	}
	GoBackToBasicInfo() {
		this.formPopupAction = true;
		this.router.navigate([`front-desk/masters/users/creation/edit/${this.userId}/basic-info`]);
	}
	isSameLoginUser(formName:FormGroup,controlName) {
		if(isSameLoginUser(this.userId)) {
			formName.controls[controlName].disable();
			this.isSameUserLogin = true;
		}
	}

	disableSubmission():boolean
	{
		if(this.isMedicalIdentifier && !this.hasSupervisor)
		{
			return this.multiSpecChildValues.some(specChildVal=>specChildVal.isValid==false)
		}
		else
		{
			return this.childValues.isValid?false:true;
		}

		
	}

}


